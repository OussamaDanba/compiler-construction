// Parsed as expected! Was tricky because of the grammar transformation.
something(n) :: Int -> Int {
    return -n - -1;
    return -1 - -1;
    return !a && b;
    return !(a && b);
}

// Parser is independent of layout. Note that I require if to have curly braces.
abs ( n ) :: Int -> Int { if (n < 0) { return -n;} else { return n; } }

// Associativity correctly parsed and pretty printer doesn't print too many
// unnecessary parenthesis.
something2(n) :: -> Int {
    return 5-4-3*3-2-1;
}